// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_import
// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for MuPDF library
class MuPDFBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MuPDFBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MuPDFBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  int mw_count_pages(ffi.Pointer<ffi.Char> filename) {
    return _mw_count_pages(filename);
  }

  late final _mw_count_pagesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'mw_count_pages',
      );
  late final _mw_count_pages = _mw_count_pagesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> extract_page_json(
    ffi.Pointer<ffi.Char> filename,
    int page_number,
    bool include_image_data,
  ) {
    return _extract_page_json(filename, page_number, include_image_data);
  }

  late final _extract_page_jsonPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Bool,
          )
        >
      >('extract_page_json');
  late final _extract_page_json = _extract_page_jsonPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, bool)
      >();

  ffi.Pointer<ffi.Char> mw_get_last_error() {
    return _mw_get_last_error();
  }

  late final _mw_get_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'mw_get_last_error',
      );
  late final _mw_get_last_error = _mw_get_last_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  void mw_free_string(ffi.Pointer<ffi.Char> s) {
    return _mw_free_string(s);
  }

  late final _mw_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'mw_free_string',
      );
  late final _mw_free_string = _mw_free_stringPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
